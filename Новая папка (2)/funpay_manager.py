import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup
import requests
from config import Config

class FunPayManager:
    def __init__(self):
        self.base_url = Config.FUNPAY_BASE_URL
        self.login = Config.FUNPAY_LOGIN
        self.password = Config.FUNPAY_PASSWORD
        self.driver = None
        self.session = requests.Session()
        self.is_logged_in = False
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞ Chrome"""
        try:
            chrome_options = Options()
            if Config.BROWSER_HEADLESS:
                chrome_options.add_argument("--headless")
            
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
            
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.driver.implicitly_wait(Config.BROWSER_TIMEOUT)
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False
    
    def login_to_funpay(self):
        """–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç FunPay"""
        try:
            if not self.driver:
                if not self.setup_driver():
                    return False
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            self.driver.get(f"{self.base_url}/account/login")
            time.sleep(2)
            
            # –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω
            login_field = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "login"))
            )
            login_field.clear()
            login_field.send_keys(self.login)
            
            # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
            password_field = self.driver.find_element(By.NAME, "password")
            password_field.clear()
            password_field.send_keys(self.password)
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            login_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            login_button.click()
            
            # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤–æ—à–ª–∏
            if "account" in self.driver.current_url or "profile" in self.driver.current_url:
                self.is_logged_in = True
                print("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ FunPay")
                return True
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ FunPay")
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ FunPay: {e}")
            return False
    
    def create_rental_listing(self, game_name: str, price_per_hour: float, account_id: str = None):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ FunPay –¥–ª—è –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return None
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            self.driver.get(f"{self.base_url}/account/sells/add")
            time.sleep(3)
            
            # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ê–∫–∫–∞—É–Ω—Ç—ã"
            category_dropdown = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "[data-testid='category-select']"))
            )
            category_dropdown.click()
            time.sleep(1)
            
            # –í—ã–±–∏—Ä–∞–µ–º "Steam"
            steam_option = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//div[contains(text(), 'Steam')]"))
            )
            steam_option.click()
            time.sleep(1)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            title_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "[data-testid='title-input']"))
            )
            title_input.clear()
            title_input.send_keys(f"–ê—Ä–µ–Ω–¥–∞ Steam –∞–∫–∫–∞—É–Ω—Ç–∞ | {game_name} | –ü–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description_input = self.driver.find_element(By.CSS_SELECTOR, "[data-testid='description-input']")
            description_input.clear()
            
            # –®–∞–±–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            listing_text = self._get_listing_template(game_name, price_per_hour)
            description_input.send_keys(listing_text)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É
            price_input = self.driver.find_element(By.CSS_SELECTOR, "[data-testid='price-input']")
            price_input.clear()
            price_input.send_keys(str(price_per_hour))
            
            # –í—ã–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É (—Ä—É–±–ª–∏)
            currency_dropdown = self.driver.find_element(By.CSS_SELECTOR, "[data-testid='currency-select']")
            currency_dropdown.click()
            time.sleep(1)
            
            rub_option = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//div[contains(text(), '‚ÇΩ')]"))
            )
            rub_option.click()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_input = self.driver.find_element(By.CSS_SELECTOR, "[data-testid='delivery-time-input']")
            delivery_input.clear()
            delivery_input.send_keys("1")
            
            # –í—ã–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω—É—Ç—ã)
            delivery_unit = self.driver.find_element(By.CSS_SELECTOR, "[data-testid='delivery-unit-select']")
            delivery_unit.click()
            time.sleep(1)
            
            minutes_option = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//div[contains(text(), '–º–∏–Ω—É—Ç')]"))
            )
            minutes_option.click()
            
            # –ù–∞–∂–∏–º–∞–µ–º "–°–æ–∑–¥–∞—Ç—å"
            create_button = self.driver.find_element(By.CSS_SELECTOR, "[data-testid='create-button']")
            create_button.click()
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            time.sleep(5)
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            listing_url = self.driver.current_url
            listing_id = listing_url.split('/')[-1]
            
            print(f"–°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã {game_name} —Å ID: {listing_id}")
            return listing_id
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è {game_name}: {e}")
            return None
    
    def _get_listing_template(self, game_name, price_per_hour):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        """
        template = f"""üéÆ **–ê—Ä–µ–Ω–¥–∞ Steam –∞–∫–∫–∞—É–Ω—Ç–∞ | {game_name}**

‚úÖ **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:**
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Steam –∞–∫–∫–∞—É–Ω—Ç—É
‚Ä¢ –ò–≥—Ä–∞ {game_name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {price_per_hour}‚ÇΩ/—á–∞—Å

‚è∞ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Ä–µ–Ω–¥–∞:**
1. –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
2. –ü–æ–ª—É—á–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
3. –ò–≥—Ä–∞–µ—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
4. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è

üîê **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
‚Ä¢ –ü–∞—Ä–æ–ª—å –º–µ–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∞—Ä–µ–Ω–¥—ã
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö

üì± **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
‚Ä¢ Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üéÅ **–ë–æ–Ω—É—Å –∑–∞ –æ—Ç–∑—ã–≤:**
‚Ä¢ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ FunPay
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ +30 –º–∏–Ω—É—Ç –±–æ–Ω—É—Å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ë–æ–Ω—É—Å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –∞—Ä–µ–Ω–¥–µ

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –ù–µ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–∑–µ–π
‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Ç—ã
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Steam

üöÄ **–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**
–û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ {game_name} –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã!"""
        
        return template

    def check_new_orders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return []
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
            self.driver.get(f"{self.base_url}/account/orders")
            time.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            orders = []
            order_elements = self.driver.find_elements(By.CSS_SELECTOR, ".order-item")
            
            for element in order_elements:
                try:
                    order_id = element.get_attribute("data-order-id")
                    status = element.find_element(By.CSS_SELECTOR, ".status").text
                    game_name = element.find_element(By.CSS_SELECTOR, ".game-name").text
                    duration = element.find_element(By.CSS_SELECTOR, ".duration").text
                    
                    if status == "–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è":
                        orders.append({
                            'id': order_id,
                            'game_name': game_name,
                            'duration': duration,
                            'status': status
                        })
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–∞–∫–∞–∑–∞: {e}")
                    continue
            
            return orders
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    def process_order(self, order_id: str, account_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return False
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–∫–∞–∑—É
            self.driver.get(f"{self.base_url}/account/orders/{order_id}")
            time.sleep(3)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            message_field = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "textarea[name='message']"))
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
            message = f"""
üéÆ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam –¥–ª—è –∏–≥—Ä—ã {account_data['game_name']}:

üë§ –õ–æ–≥–∏–Ω: {account_data['username']}
üîë –ü–∞—Ä–æ–ª—å: {account_data['password']}
‚è∞ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {account_data['duration']} —á–∞—Å–æ–≤
üìÖ –ù–∞—á–∞–ª–æ: {account_data['start_time']}

‚ö†Ô∏è –í–ê–ñ–ù–û: 
- –ù–µ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
- –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–∑–µ–π
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
- –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üí° –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞

–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üéØ
            """
            
            message_field.clear()
            message_field.send_keys(message.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            send_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            send_button.click()
            
            time.sleep(3)
            print(f"–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            return False
    
    def check_reviews(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return []
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤
            self.driver.get(f"{self.base_url}/account/reviews")
            time.sleep(3)
            
            reviews = []
            review_elements = self.driver.find_elements(By.CSS_SELECTOR, ".review-item")
            
            for element in review_elements:
                try:
                    review_id = element.get_attribute("data-review-id")
                    rating = element.find_element(By.CSS_SELECTOR, ".rating").get_attribute("data-rating")
                    comment = element.find_element(By.CSS_SELECTOR, ".comment").text
                    order_id = element.find_element(By.CSS_SELECTOR, ".order-id").text
                    
                    reviews.append({
                        'id': review_id,
                        'rating': int(rating),
                        'comment': comment,
                        'order_id': order_id
                    })
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–∑—ã–≤–∞: {e}")
                    continue
            
            return reviews
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")
            return []
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()
            self.driver = None
